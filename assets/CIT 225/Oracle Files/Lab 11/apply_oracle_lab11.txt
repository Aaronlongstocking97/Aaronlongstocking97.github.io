SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #1
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 1, insert the query
SQL> --  in the MERGE statement to the RENTAL table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #1 statements here.
SQL> 
SQL> --
SQL> MERGE INTO rental target
  2  USING (SELECT   DISTINCT
  3  		       r.rental_id
  4  	      ,        c.contact_id
  5  	      ,        tu.check_out_date AS check_out_date
  6  	      ,        tu.return_date AS return_date
  7  	      ,        1001 AS created_by
  8  	      ,        TRUNC(SYSDATE) AS creation_date
  9  	      ,        1001 AS last_updated_by
 10  	      ,        TRUNC(SYSDATE) AS last_update_date
 11  	      FROM     member m INNER JOIN contact c
 12  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 13  	      ON       c.first_name = tu.first_name
 14  	      AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15  	      AND      c.last_name = tu.last_name
 16  	      AND      tu.account_number = m.account_number LEFT JOIN rental r
 17  	      ON       c.contact_id = r.customer_id
 18  	      AND      tu.check_out_date = r.check_out_date
 19  	      AND      tu.return_date = r.return_date) source
 20  ON (target.rental_id = source.rental_id)
 21  WHEN MATCHED THEN
 22  UPDATE SET last_updated_by = source.last_updated_by
 23  ,		last_update_date = source.last_update_date
 24  WHEN NOT MATCHED THEN
 25  INSERT VALUES
 26  ( rental_s1.nextval
 27  , source.contact_id
 28  , source.check_out_date
 29  , source.return_date
 30  , source.created_by
 31  , source.creation_date
 32  , source.last_updated_by
 33  , source.last_update_date);

4681 rows merged.

SQL> 
SQL> --
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental after merge"
  2  FROM     rental;

Rental                                                                                      
-------                                                                                     
  4,689                                                                                     

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #2
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 2, insert the query
SQL> --  in the MERGE statement to the RENTAL_ITEM table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #2 statements here.
SQL> 
SQL> --
SQL> MERGE INTO rental_item target
  2  USING (SELECT ri.rental_item_id
  3   ,        r.rental_id
  4   ,        tu.item_id
  5   ,        1001 AS created_by
  6   ,        TRUNC(SYSDATE) AS creation_date
  7   ,        1001 AS last_updated_by
  8   ,        TRUNC(SYSDATE) AS last_update_date
  9   ,        cl.common_lookup_id AS rental_item_type
 10   ,        r.return_date - r.check_out_date AS rental_item_price
 11   FROM     member m INNER JOIN contact c
 12   ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 13   ON       c.first_name = tu.first_name
 14   AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15   AND      c.last_name = tu.last_name
 16   AND      tu.account_number = m.account_number LEFT JOIN rental r
 17   ON       r.check_out_date = tu.check_out_date
 18   AND      r.return_date = tu.return_date
 19   AND      c.contact_id = r.customer_id INNER JOIN common_lookup cl
 20   ON       tu.rental_item_type = cl.common_lookup_type
 21   AND      cl.common_lookup_column = 'RENTAL_ITEM_TYPE' LEFT JOIN rental_item ri
 22   ON       ri.rental_id = r.rental_id
 23   AND      ri.item_id = tu.item_id) source
 24  ON (target.rental_item_id = source.rental_item_id)
 25  WHEN MATCHED THEN
 26  UPDATE SET last_updated_by = source.last_updated_by
 27  ,		last_update_date = source.last_update_date
 28  WHEN NOT MATCHED THEN
 29  INSERT VALUES
 30  ( rental_item_s1.nextval
 31  , source.rental_id
 32  , source.item_id
 33  , source.created_by
 34  , source.creation_date
 35  , source.last_updated_by
 36  , source.last_update_date
 37  , source.rental_item_type
 38  , source.rental_item_price);

11520 rows merged.

SQL> 
SQL> 
SQL> --
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental Item after merge"
  2  FROM     rental_item;

Rental                                                                                      
-------                                                                                     
 11,533                                                                                     

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #3
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 3, insert the query
SQL> --  in the MERGE statement to the TRANSACTION table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #3 statements here.
SQL> 
SQL> --
SQL> MERGE INTO transaction target
  2  USING (SELECT     t.transaction_id
  3  	      ,        tu.payment_account_number AS transaction_account
  4  	      ,        cl1.common_lookup_id AS transaction_type
  5  	      ,        tu.transaction_date
  6  	      ,        (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
  7  	      ,        r.rental_id
  8  	      ,        cl2.common_lookup_id AS payment_method_type
  9  	      ,        m.credit_card_number AS payment_account_number
 10  	      ,        1001 AS created_by
 11  	      ,        TRUNC(SYSDATE) AS creation_date
 12  	      ,        1001 AS last_updated_by
 13  	      ,        TRUNC(SYSDATE) AS last_update_date
 14  	      FROM     member m INNER JOIN contact c
 15  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 16  	      ON       tu.account_number = m.account_number
 17  	      AND      tu.first_name = c.first_name
 18  	      AND      NVL(tu.middle_name,'x') = NVL(c.middle_name,'x')
 19  	      AND      tu.last_name = c.last_name INNER JOIN rental r
 20  	      ON       c.contact_id = r.customer_id
 21  	      AND      tu.check_out_date = r.check_out_date
 22  	      AND      tu.return_date = r.return_date INNER JOIN common_lookup cl1
 23  	      ON       cl1.common_lookup_table = 'TRANSACTION'
 24  	      AND      cl1.common_lookup_column = 'TRANSACTION_TYPE'
 25  	      AND      cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
 26  	      ON       cl2.common_lookup_table = 'TRANSACTION'
 27  	      AND      cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
 28  	      AND      cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
 29  	      ON       t.transaction_account = tu.payment_account_number
 30  	      AND      t.transaction_type = cl1.common_lookup_id
 31  	      AND      t.transaction_date = tu.transaction_date
 32  	      AND      t.transaction_amount = tu.transaction_amount
 33  	      AND      t.payment_method_type = cl2.common_lookup_id
 34  	      AND      t.payment_account_number = m.credit_card_number
 35  	      GROUP BY t.transaction_id
 36  	      ,        tu.payment_account_number
 37  	      ,        cl1.common_lookup_id
 38  	      ,        tu.transaction_date
 39  	      ,        r.rental_id
 40  	      ,        cl2.common_lookup_id
 41  	      ,        m.credit_card_number
 42  	      ,        1001
 43  	      ,        TRUNC(SYSDATE)
 44  	      ,        1001
 45  	      ,        TRUNC(SYSDATE)) source
 46  ON (target.transaction_id = source.transaction_id)
 47  WHEN MATCHED THEN
 48  UPDATE SET last_updated_by = source.last_updated_by
 49  ,		last_update_date = source.last_update_date
 50  WHEN NOT MATCHED THEN
 51  INSERT VALUES
 52  ( transaction_s1.nextval
 53  , source.transaction_account
 54  , source.transaction_type
 55  , source.transaction_date
 56  , source.transaction_amount
 57  , source.rental_id
 58  , source.payment_method_type
 59  , source.payment_account_number
 60  , source.created_by
 61  , source.creation_date
 62  , source.last_updated_by
 63  , source.last_update_date);

4681 rows merged.

SQL> 
SQL> 
SQL> --
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac                                                                                     
-------                                                                                     
  4,681                                                                                     

1 row selected.

SQL> 
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4
SQL> --  -------
SQL> --  Insert the MERGE statements to the RENTAL, RENTAL_ITEM,
SQL> --  and TRANSACTION tables into the UPLOAD_TRANSACTION
SQL> --  procedure; execute the UPLOAD_TRANSACTION procedure,
SQL> --  and query the results from the target tables; and
SQL> --  re-execute the UPLOAD_TRANSACTION procedure to
SQL> --  verify that the query returns the same set and only
SQL> --  inserts new records.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #4 statements here.
SQL> 
SQL> -- Create a procedure to wrap the transaction.
SQL> CREATE OR REPLACE PROCEDURE upload_transaction IS
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6    -- Merge into RENTAL table.
  7   MERGE INTO rental target
  8  USING (SELECT   DISTINCT
  9  		       r.rental_id
 10  	      ,        c.contact_id
 11  	      ,        tu.check_out_date AS check_out_date
 12  	      ,        tu.return_date AS return_date
 13  	      ,        1001 AS created_by
 14  	      ,        TRUNC(SYSDATE) AS creation_date
 15  	      ,        1001 AS last_updated_by
 16  	      ,        TRUNC(SYSDATE) AS last_update_date
 17  	      FROM     member m INNER JOIN contact c
 18  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 19  	      ON       c.first_name = tu.first_name
 20  	      AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 21  	      AND      c.last_name = tu.last_name
 22  	      AND      tu.account_number = m.account_number LEFT JOIN rental r
 23  	      ON       c.contact_id = r.customer_id
 24  	      AND      tu.check_out_date = r.check_out_date
 25  	      AND      tu.return_date = r.return_date) source
 26  ON (target.rental_id = source.rental_id)
 27  WHEN MATCHED THEN
 28  UPDATE SET last_updated_by = source.last_updated_by
 29  ,		last_update_date = source.last_update_date
 30  WHEN NOT MATCHED THEN
 31  INSERT VALUES
 32  ( rental_s1.nextval
 33  , source.contact_id
 34  , source.check_out_date
 35  , source.return_date
 36  , source.created_by
 37  , source.creation_date
 38  , source.last_updated_by
 39  , source.last_update_date);
 40  
 41    -- Merge into RENTAL_ITEM table.
 42    MERGE INTO rental_item target
 43  USING (SELECT ri.rental_item_id
 44   ,        r.rental_id
 45   ,        tu.item_id
 46   ,        1001 AS created_by
 47   ,        TRUNC(SYSDATE) AS creation_date
 48   ,        1001 AS last_updated_by
 49   ,        TRUNC(SYSDATE) AS last_update_date
 50   ,        cl.common_lookup_id AS rental_item_type
 51   ,        r.return_date - r.check_out_date AS rental_item_price
 52   FROM     member m INNER JOIN contact c
 53   ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 54   ON       c.first_name = tu.first_name
 55   AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 56   AND      c.last_name = tu.last_name
 57   AND      tu.account_number = m.account_number LEFT JOIN rental r
 58   ON       r.check_out_date = tu.check_out_date
 59   AND      r.return_date = tu.return_date
 60   AND      c.contact_id = r.customer_id INNER JOIN common_lookup cl
 61   ON       tu.rental_item_type = cl.common_lookup_type
 62   AND      cl.common_lookup_column = 'RENTAL_ITEM_TYPE' LEFT JOIN rental_item ri
 63   ON       ri.rental_id = r.rental_id
 64   AND      ri.item_id = tu.item_id) source
 65  ON (target.rental_item_id = source.rental_item_id)
 66  WHEN MATCHED THEN
 67  UPDATE SET last_updated_by = source.last_updated_by
 68  ,		last_update_date = source.last_update_date
 69  WHEN NOT MATCHED THEN
 70  INSERT VALUES
 71  ( rental_item_s1.nextval
 72  , source.rental_id
 73  , source.item_id
 74  , source.created_by
 75  , source.creation_date
 76  , source.last_updated_by
 77  , source.last_update_date
 78  , source.rental_item_type
 79  , source.rental_item_price);
 80  
 81    -- Merge into TRANSACTION table.
 82    MERGE INTO transaction target
 83  USING (SELECT     t.transaction_id
 84  	      ,        tu.payment_account_number AS transaction_account
 85  	      ,        cl1.common_lookup_id AS transaction_type
 86  	      ,        tu.transaction_date
 87  	      ,        (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
 88  	      ,        r.rental_id
 89  	      ,        cl2.common_lookup_id AS payment_method_type
 90  	      ,        m.credit_card_number AS payment_account_number
 91  	      ,        1001 AS created_by
 92  	      ,        TRUNC(SYSDATE) AS creation_date
 93  	      ,        1001 AS last_updated_by
 94  	      ,        TRUNC(SYSDATE) AS last_update_date
 95  	      FROM     member m INNER JOIN contact c
 96  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 97  	      ON       tu.account_number = m.account_number
 98  	      AND      tu.first_name = c.first_name
 99  	      AND      NVL(tu.middle_name,'x') = NVL(c.middle_name,'x')
100  	      AND      tu.last_name = c.last_name INNER JOIN rental r
101  	      ON       c.contact_id = r.customer_id
102  	      AND      tu.check_out_date = r.check_out_date
103  	      AND      tu.return_date = r.return_date INNER JOIN common_lookup cl1
104  	      ON       cl1.common_lookup_table = 'TRANSACTION'
105  	      AND      cl1.common_lookup_column = 'TRANSACTION_TYPE'
106  	      AND      cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
107  	      ON       cl2.common_lookup_table = 'TRANSACTION'
108  	      AND      cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
109  	      AND      cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
110  	      ON       t.transaction_account = tu.payment_account_number
111  	      AND      t.transaction_type = cl1.common_lookup_id
112  	      AND      t.transaction_date = tu.transaction_date
113  	      AND      t.transaction_amount = tu.transaction_amount
114  	      AND      t.payment_method_type = cl2.common_lookup_id
115  	      AND      t.payment_account_number = m.credit_card_number
116  	      GROUP BY t.transaction_id
117  	      ,        tu.payment_account_number
118  	      ,        cl1.common_lookup_id
119  	      ,        tu.transaction_date
120  	      ,        r.rental_id
121  	      ,        cl2.common_lookup_id
122  	      ,        m.credit_card_number
123  	      ,        1001
124  	      ,        TRUNC(SYSDATE)
125  	      ,        1001
126  	      ,        TRUNC(SYSDATE)) source
127  ON (target.transaction_id = source.transaction_id)
128  WHEN MATCHED THEN
129  UPDATE SET last_updated_by = source.last_updated_by
130  ,		last_update_date = source.last_update_date
131  WHEN NOT MATCHED THEN
132  INSERT VALUES
133  ( transaction_s1.nextval
134  , source.transaction_account
135  , source.transaction_type
136  , source.transaction_date
137  , source.transaction_amount
138  , source.rental_id
139  , source.payment_method_type
140  , source.payment_account_number
141  , source.created_by
142  , source.creation_date
143  , source.last_updated_by
144  , source.last_update_date);
145  
146    -- Save the changes.
147    COMMIT;
148  
149  EXCEPTION
150    WHEN OTHERS THEN
151  	 ROLLBACK TO starting_point;
152  	 RETURN;
153  END;
154  /

Procedure created.

SQL> 
SQL> --
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> --
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                             
 Rental    Item Transaction                                                                 
  Count   Count       Count                                                                 
------- ------- -----------                                                                 
  4,689  11,533       4,681                                                                 

1 row selected.

SQL> 
SQL> 
SQL> --
SQL> EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> --
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                             
 Rental    Item Transaction                                                                 
  Count   Count       Count                                                                 
------- ------- -----------                                                                 
  4,689  11,533       4,681                                                                 

1 row selected.

SQL> -- --------------------------------------------------------
SQL> --  Step #5
SQL> --  -------
SQL> --  Write a query that uses date functions to report
SQL> --  aggregated transaction amount values for base revenue,
SQL> --  110% of revenue, 120% of revenue, 90% of revenue,
SQL> --  80% or revenue.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #5 statements here.
SQL> 
SQL> 
SQL> --
SQL> COLUMN month		FORMAT 99,999 HEADING "MONTH"
SQL> COLUMN base_revenue	FROMAT 99,999 HEADING "BASE_REVENUE"
SP2-0158: unknown COLUMN option "FROMAT"
SQL> COLUMN ten_plus		FORMAT 99,999 HEADING "10_PLUS"
SQL> COLUMN twenty_plus 	FORMAT 99,999 HEADING "20_PLUS"
SQL> COLUMN ten_plus_less_b	FORMAT 99,999 HEADING "10_PLUS_LESS_B"
SQL> COLUMN twenty_plus_less_b	FORMAT 99,999 HEADING "20_PLUS_LESS_B"
SQL> SELECT  TO_CHAR(transaction_date,'MON-YYYY') AS month
  2  , TO_CHAR(SUM(transaction_amount),'$9,999,999.00') AS base_revenue
  3  , TO_CHAR(SUM(transaction_amount) * 1.1,'$9,999,999.00') AS ten_plus
  4  , TO_CHAR(SUM(transaction_amount) * 1.2,'$9,999,999.00') AS twenty_plus
  5  , TO_CHAR(SUM(transaction_amount) * 0.10,'$9,999,999.00') AS ten_plus_less_b
  6  , TO_CHAR(SUM(transaction_amount) * 0.20,'$9,999,999.00') AS twenty_plus_less_b
  7  FROM transaction
  8  WHERE EXTRACT(YEAR FROM TO_DATE(transaction_date)) = 2009
  9  GROUP BY TO_CHAR(transaction_date,'MON-YYYY')
 10  ORDER BY MAX(transaction_date);

MONTH             BASE_REVENUE   10_PLUS        20_PLUS        10_PLUS_LESS_B 20_PLUS_LESS_B
----------------- -------------- -------------- -------------- -------------- --------------
JAN-2009               $2,520.00      $2,772.00      $3,024.00        $252.00        $504.00
FEB-2009               $4,029.00      $4,431.90      $4,834.80        $402.90        $805.80
MAR-2009               $5,067.00      $5,573.70      $6,080.40        $506.70      $1,013.40
APR-2009               $4,653.00      $5,118.30      $5,583.60        $465.30        $930.60
MAY-2009               $2,091.00      $2,300.10      $2,509.20        $209.10        $418.20
JUN-2009               $1,140.00      $1,254.00      $1,368.00        $114.00        $228.00
JUL-2009               $2,268.00      $2,494.80      $2,721.60        $226.80        $453.60
AUG-2009               $2,115.00      $2,326.50      $2,538.00        $211.50        $423.00
SEP-2009               $2,073.00      $2,280.30      $2,487.60        $207.30        $414.60
OCT-2009               $3,090.00      $3,399.00      $3,708.00        $309.00        $618.00
NOV-2009               $2,949.00      $3,243.90      $3,538.80        $294.90        $589.80
DEC-2009               $2,208.00      $2,428.80      $2,649.60        $220.80        $441.60

12 rows selected.

SQL> 
SQL> 
SQL> 
SQL> --
SQL> SELECT   TO_CHAR(9999,'$9,999,999.00') AS "Formatted"
  2  FROM     dual;

Formatted                                                                                   
--------------                                                                              
     $9,999.00                                                                              

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- Close log file.
SQL> SPOOL OFF
